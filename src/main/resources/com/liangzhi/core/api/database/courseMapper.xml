<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liangzhi.core.api.database.mapper.CourseMapper">
	<resultMap type="com.liangzhi.commons.domain.Course" id="courseMap">
		<result column="CourseID" property="id"/>
		<result column="CourseName" property="name"/>
		<result column="CourseDescription" property="description"/>
		<result column="CourseStatus" property="status"/>
		<result column="CourseType" property="type"/>
		<result column="CourseLogoURL" property="logoUrl"/>
		<result column="CourseVideoURL" property="videoUrl"/>
		<result column="CourseCreatedDate" property="createdDate"/>
		<result column="CourseUpdatedDate" property="updatedDate"/>
		<result column="CourseIsScience" property="science"/>
		<result column="CourseIsTechnology" property="technology"/>
		<result column="CourseIsEngineering" property="engineering"/>
		<result column="CourseIsMathematics" property="mathematics"/>
	</resultMap>
	
	<resultMap type="com.liangzhi.commons.domain.CourseCategory" id="courseCategoryMap">
	    <result column="CourseCategoryID" property="id"/>
	    <result column="CourseCategoryName" property="name"/>
	    <result column="CourseCategoryStemID" property="stemCategory"/>
	</resultMap>
	
	<resultMap type="com.liangzhi.commons.domain.CourseTheme" id="courseThemeMap">
	    <result column="CourseThemeID" property="id"/>
	    <result column="CourseThemeName" property="name"/>
	</resultMap>
	
	<resultMap type="com.liangzhi.commons.domain.CourseView" id="courseViewMap">
		<result column="CourseID" property="course.id"/>
		<result column="CourseName" property="course.name"/>
		<result column="CourseDescription" property="course.description" />
		<result column="CourseStatus" property="course.status"/>
		<result column="CourseType" property="course.type"/>
		<result column="CourseLogoURL" property="course.logoUrl"/>
		<result column="CourseVideoURL" property="course.videoUrl"/>
		<result column="CourseCreatedDate" property="course.createdDate"/>
		<result column="CourseUpdatedDate" property="course.updatedDate"/>
		<result column="CourseIsScience" property="course.science"/>
		<result column="CourseIsTechnology" property="course.technology"/>
		<result column="CourseIsEngineering" property="course.engineering"/>
		<result column="CourseIsMathematics" property="course.mathematics"/>
		<result column="CourseBIDataID" property="courseBiData.id"/>
		<result column="CourseBIDataCourseID" property="courseBiData.courseId"/>
		<result column="CourseBIDataDetailPageView" property="courseBiData.courseDetailsPageView"/>
		<result column="CourseBIDataStoryPageView" property="courseBiData.courseStoryPageView"/>
		<result column="CourseBIDataMakePageView" property="courseBiData.courseMakePageView"/>
		<result column="CourseBIDataTotalPageView" property="courseBiData.courseTotalPageView"/>
		<result column="CourseCategories" property="categories"/>
		<result column="CourseStemCategories" property="stemCategories"/>
		<result column="CourseThemes" property="themes"/>
	</resultMap>
	
	<resultMap type="com.liangzhi.commons.domain.CourseCategoryMapping" id="courseCategoryMappingMap">
	    <result column="CourseCategoryMappingID" property="id"/>
	    <result column="CourseCategoryMappingCategoryID" property="categoryId"/>
	</resultMap>
	
	<resultMap type="com.liangzhi.commons.domain.CourseThemeMapping" id="courseThemeMappingMap">
	    <result column="CourseThemeMappingID" property="id"/>
	    <result column="CourseThemeMappingThemeID" property="themeId"/>
	</resultMap>
	
	<resultMap type="com.liangzhi.commons.domain.CourseLikeMapping" id="courseLikeMappingMap">
	    <result column="CourseLikesID" property="id"/>
	    <result column="CourseLikesUserID" property="userId"/>
	    <result column="CourseLikesCourseID" property="courseId"/>
	    <result column="CourseLikesDate" property="likeDate"/>
	</resultMap>
	
	<resultMap type="com.liangzhi.commons.domain.CourseFavoriteMapping" id="courseFavoritesMappingMap">
	    <result column="CourseFavoritesID" property="id"/>
	    <result column="CourseFavoritesUserID" property="userId"/>
	    <result column="CourseFavoritesCourseID" property="courseId"/>
	    <result column="CourseFavoritesDate" property="favoriteDate"/>
	</resultMap>
	
	<resultMap type="com.liangzhi.commons.domain.CourseComment" id="courseCommentMap">
	    <result column="CourseCommentID" property="id"/>
	    <result column="CourseCommentUserID" property="userId"/>
	    <result column="CourseCommentCourseID" property="courseId"/>
	    <result column="CourseCommentText" property="text"/>
	    <result column="CourseCommentDate" property="commentDate"/>
	</resultMap>
		
	<select id="getCourseById" resultMap="courseMap">
	    SELECT * FROM courses
	    WHERE CourseID = #{courseId}
	</select>
	
	<select id="getCourseCategories" resultMap="courseCategoryMap">
	    SELECT * FROM coursecategory
	</select>
	
	<select id="getCourseThemes" resultMap="courseThemeMap">
	    SELECT * FROM coursethemes
	</select>
	
	<select id="getCourseViewById" resultMap="courseViewMap">
	    SELECT *, 
	    group_concat(distinct coursecategorymappingCategoryId order by coursecategorymappingCategoryId) as CourseCategories, 
	    group_concat(distinct coursethememappingThemeId order by coursethememappingThemeId) as CourseThemes
	    from courses
	    LEFT OUTER JOIN coursesbidata on CourseBIDataCourseID = CourseID
        LEFT OUTER JOIN coursecategorymapping on CourseCategoryMappingCourseID = CourseID
        LEFT OUTER JOIN coursecategory on CourseCategoryMappingCategoryID = CourseCategoryID
        LEFT OUTER JOIN coursethememapping on CourseThemeMappingCourseID = CourseID
        WHERE CourseID = #{courseId}
	</select>
	
	<select id="getCourseViews" resultMap="courseViewMap">
	    SELECT *, 
	    group_concat(distinct coursecategorymappingCategoryId order by coursecategorymappingCategoryId) as CourseCategories, 
	    group_concat(distinct coursethememappingThemeId order by coursethememappingThemeId) as CourseThemes,
	    (CourseBIDataMakePageView + CourseBIDataStoryPageView + CourseBIDataDetailPageView) as CourseBIDataTotalPageView,
	    CourseBIDataDetailPageView,
	    CourseBIDataStoryPageView,
	    CourseBIDataMakePageView
	    from courses
	    LEFT OUTER JOIN coursesbidata on CourseBIDataCourseID = CourseID
        LEFT OUTER JOIN coursecategorymapping on CourseCategoryMappingCourseID = CourseID
        LEFT OUTER JOIN coursecategory on CourseCategoryMappingCategoryID = CourseCategoryID
        LEFT OUTER JOIN coursethememapping on CourseThemeMappingCourseID = CourseID
        <where>
            <if test="status != null">
                CourseStatus = #{status.value}
            </if>
            <if test="type != null">
                AND CourseType = #{type.value}
            </if>
        </where>
        group by CourseID
	</select>
	
	<select id="getCourseCategoriesById" resultMap="courseCategoryMappingMap">
	    SELECT * FROM coursecategorymapping
	    WHERE CourseCategoryMappingCourseID = #{courseId}
	</select>
	
	<insert id="insertCourseCategoryMappings">
	    INSERT INTO coursecategorymapping (CourseCategoryMappingCourseID, CourseCategoryMappingCategoryID) VALUES 
	    <foreach item="mapping" index="index" collection="mappings" separator=",">
	        (#{courseId},#{mapping.categoryId})
	    </foreach>
	</insert>
	
	<delete id="deleteCourseCategoryMappings">
	    DELETE from coursecategorymapping
	    WHERE CourseCategoryMappingCourseID = #{courseId}
	</delete>
	
	<insert id="insertCourseThemeMappings">
	    INSERT INTO coursethememapping (CourseThemeMappingCourseID, CourseThemeMappingThemeID) VALUES 
	    <foreach item="mapping" index="index" collection="mappings" separator=",">
	        (#{courseId},#{mapping.themeId})
	    </foreach>
	</insert>
	
	<delete id="deleteCourseThemeMappings">
	    DELETE from coursethememapping
	    WHERE CourseThemeMappingCourseID = #{courseId}
	</delete>
	
	<select id="getCourseThemesById" resultMap="courseThemeMappingMap">
	    SELECT * FROM coursethememapping
	    WHERE CourseThemeMappingCourseID = #{courseId}
	</select>
	
	<insert id="insertCourse" useGeneratedKeys="true" keyProperty="course.id">
	    INSERT INTO courses
	    (CourseName,
	     CourseDescription,
	     CourseStatus,
	     CourseVideoURL)
	     VALUES
	     (
	     #{course.name},
	     #{course.description},
	     #{course.status},
	     #{course.videoUrl})   
	</insert>
	
	<update id="updateCourse">
	     UPDATE courses
	     SET
	     CourseName = #{course.name},
	     CourseDescription = #{course.description},
	     CourseStatus = #{course.status},
	     CourseVideoURL = #{course.videoUrl}
	     WHERE CourseID = #{course.id}
	</update>
	
	<insert id="likeCourse">
	     INSERT INTO courselikes 
	     (CourseLikesUserID,
	      CourseLikesCourseID,
	      CourseLikesDate)
	     VALUES
	     (
	      #{userId},
	      #{courseId},
	      NOW()
	     )
	</insert>
	
	<delete id="unlikeCourse">
	     DELETE FROM courselikes
	     WHERE CourseLikesUserID = #{userId} AND CourseLikesCourseID = #{courseId}
	</delete>
	
	<select id="getCourseLikes" resultMap="courseLikeMappingMap">
	     SELECT * FROM courselikes
	     WHERE CourseLikesCourseID = #{courseId}
	</select>
	
	<select id="getUserLikedCourses" resultMap="courseLikeMappingMap">
	     SELECT * FROM courselikes
	     WHERE CourseFavoritesUserID = #{userId}
	</select>
	
	<insert id="addToFavoriteCourse">
	     INSERT INTO coursefavorites
	     (CourseFavoritesUserID,
	      CourseFavoritesCourseID,
	      CourseFavoritesDate)
	     VALUES
	     (
	      #{userId},
	      #{courseId},
	      NOW()
	     )
	</insert>
	
	<delete id="deleteFromFavoriteCourse">
	     DELETE FROM coursefavorites
	     WHERE CourseFavoritesUserID = #{userId} AND CourseFavoritesCourseID = #{courseId}
	</delete>
	
	<select id="getCourseFavorites" resultMap="courseFavoritesMappingMap">
	     SELECT * FROM coursefavorites
	     WHERE CourseFavoritesCourseID = #{courseId}
	</select>
	
	<select id="getUserFavoriteCourses" resultMap="courseFavoritesMappingMap">
	     SELECT * FROM coursefavorites
	     WHERE CourseFavoritesUserID = #{userId}
	</select>

	<insert id="postCourseComment" useGeneratedKeys="true" keyProperty="comment.id">
	     INSERT INTO coursecomments (CourseCommentUserID, CourseCommentText, CourseCommentCourseID, CourseCommentDate) 
	     VALUES (#{comment.userId}, #{comment.text}, #{comment.courseId}, NOW());
	</insert>
	
	<delete id="removeCourseCommentByCommentId">
	     DELETE FROM coursecomments 
	     WHERE CourseCommentID = #{commentId}
	</delete>
	
	<select id="getCourseComment" resultMap="courseCommentMap">
	     SELECT * FROM coursecomments
	     WHERE CourseCommentID = #{commentId}
	</select>
		
	<select id="getCourseComments" resultMap="courseCommentMap">
	     SELECT * FROM coursecomments 
	     <where>
	       <if test="courseId != null">
	         AND CourseCommentCourseID = #{courseId}
	       </if>
	       <if test="userId != null">
	         AND CourseCommentUserID = #{userId}
	       </if>
	     </where>
	</select>
	
	<update id="updateCoursePageView">
	    UPDATE coursesbidata
	    <choose>
	      <when test="pageType == 0">SET CourseBIDataDetailPageView = CourseBIDataDetailPageView + #{courseBiUpdate.pageViewDelta}</when>
	      <when test="pageType == 1">SET CourseBIDataStoryPageView = CourseBIDataStoryPageView + #{courseBiUpdate.pageViewDelta}</when>
	      <otherwise>SET CourseBIDataMakePageView = CourseBIDataMakePageView + #{courseBiUpdate.pageViewDelta}</otherwise>
	    </choose>
	    where CourseBIDataCourseID = #{courseBiUpdate.courseId}
	</update>
	
	<insert id="insertCourseBiData">
	    INSERT coursesbidata
	    (CourseBIDataCourseID,
	     CourseBIDataDetailPageView,
	     CourseBIDataStoryPageView,
	     CourseBIDataMakePageView)
	    VALUES
	    (
	    #{courseBiData.courseId},
	    #{courseBiData.courseDetailsPageView},
	    #{courseBiData.courseStoryPageView},
	    #{courseBiData.courseMakePageView}
	    ) 
	</insert>
</mapper>